{
	"info": {
		"_postman_id": "b8d455c0-e056-465a-8399-662e96df1a13",
		"name": "Simple Grocery Store API (Original) Copy",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "11038218"
	},
	"item": [
		{
			"name": "API Status",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", function () {",
							"  pm.expect(pm.response.code).to.equal(200);",
							"});",
							"",
							"",
							"pm.test(\"Response has the required field - status\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData.status).to.exist;",
							"});",
							"",
							"",
							"pm.test(\"Status is a non-empty string\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData.status).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Status should not be empty\");",
							"});",
							"",
							"",
							"pm.test(\"Content-Type header is set to application/json\", function () {",
							"    pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');",
							"});",
							"",
							"",
							"pm.test(\"Response time is less than 500ms\", function () {",
							"  pm.expect(pm.response.responseTime).to.be.below(500);",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/status",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"status"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get all products",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", function () {",
							"  pm.response.to.have.status(200);",
							"});",
							"",
							"",
							"pm.test(\"Response has the required fields\", function () {",
							"  const responseData = pm.response.json();",
							"  ",
							"  pm.expect(responseData).to.be.an('array').that.is.not.empty;",
							"  ",
							"  responseData.forEach(function(product) {",
							"    pm.expect(product).to.have.property('id');",
							"    pm.expect(product).to.have.property('category');",
							"    pm.expect(product).to.have.property('name');",
							"    pm.expect(product).to.have.property('inStock');",
							"  });",
							"});",
							"",
							"",
							"pm.test(\"Verify that the response is in JSON format\", function () {",
							"  pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
							"});",
							"",
							"",
							"pm.test(\"Validate that the 'id' is a non-negative integer\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('array');",
							"    ",
							"    responseData.forEach(function (product) {",
							"        pm.expect(product.id).to.be.a('number');",
							"        pm.expect(product.id).to.be.at.least(0);",
							"    });",
							"});",
							"",
							"",
							"pm.test(\"Verify that 'inStock' field is a boolean value\", function () {",
							"  const responseData = pm.response.json();",
							"",
							"  pm.expect(responseData).to.be.an('array');",
							"  responseData.forEach(function (product) {",
							"    pm.expect(product.inStock).to.be.a('boolean');",
							"  });",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/products?category=fresh-produce",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"products"
					],
					"query": [
						{
							"key": "category",
							"value": "fresh-produce"
						},
						{
							"key": "results",
							"value": "1john",
							"disabled": true
						}
					]
				}
			},
			"response": [
				{
					"name": "Get all products",
					"originalRequest": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/products",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"products"
							],
							"query": [
								{
									"key": "category",
									"value": "fresh-produce",
									"disabled": true
								},
								{
									"key": "results",
									"value": "1john",
									"disabled": true
								}
							]
						}
					},
					"status": "OK",
					"code": 200,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Date",
							"value": "Sat, 24 Feb 2024 20:17:02 GMT"
						},
						{
							"key": "Content-Type",
							"value": "application/json; charset=utf-8"
						},
						{
							"key": "Content-Length",
							"value": "1716"
						},
						{
							"key": "Connection",
							"value": "keep-alive"
						},
						{
							"key": "x-powered-by",
							"value": "Express"
						},
						{
							"key": "etag",
							"value": "W/\"6b4-RVZTrjCoC03tQFslV/oF2zXZ8Wo\""
						}
					],
					"cookie": [],
					"body": "[\n    {\n        \"id\": 4643,\n        \"category\": \"coffee\",\n        \"name\": \"Starbucks Coffee Variety Pack, 100% Arabica\",\n        \"inStock\": true\n    },\n    {\n        \"id\": 4646,\n        \"category\": \"coffee\",\n        \"name\": \"Ethical Bean Medium Dark Roast, Espresso\",\n        \"inStock\": true\n    },\n    {\n        \"id\": 4641,\n        \"category\": \"coffee\",\n        \"name\": \"Don Francisco Colombia Supremo Medium Roast\",\n        \"inStock\": true\n    },\n    {\n        \"id\": 1225,\n        \"category\": \"fresh-produce\",\n        \"name\": \"1/2 in. Brushless Hammer Drill\",\n        \"inStock\": true\n    },\n    {\n        \"id\": 3674,\n        \"category\": \"fresh-produce\",\n        \"name\": \"20V Max Cordless Drill Combo Kit\",\n        \"inStock\": true\n    },\n    {\n        \"id\": 2585,\n        \"category\": \"fresh-produce\",\n        \"name\": \"Green Cabbage Organic\",\n        \"inStock\": true\n    },\n    {\n        \"id\": 5851,\n        \"category\": \"fresh-produce\",\n        \"name\": \"Cucumber Organic\",\n        \"inStock\": false\n    },\n    {\n        \"id\": 8739,\n        \"category\": \"fresh-produce\",\n        \"name\": \"Fresh Spinach Organic\",\n        \"inStock\": true\n    },\n    {\n        \"id\": 2177,\n        \"category\": \"meat-seafood\",\n        \"name\": \"Cosco Three Step Steel Platform\",\n        \"inStock\": true\n    },\n    {\n        \"id\": 1709,\n        \"category\": \"meat-seafood\",\n        \"name\": \"Beef Choice Angus Ribeye Steak\",\n        \"inStock\": true\n    },\n    {\n        \"id\": 1709,\n        \"category\": \"meat-seafood\",\n        \"name\": \"Angus Steak Burgers\",\n        \"inStock\": true\n    },\n    {\n        \"id\": 7395,\n        \"category\": \"meat-seafood\",\n        \"name\": \"Boneless Skinless Chicken Breasts\",\n        \"inStock\": true\n    },\n    {\n        \"id\": 8554,\n        \"category\": \"candy\",\n        \"name\": \"Kinder Joy Eggs\",\n        \"inStock\": true\n    },\n    {\n        \"id\": 6483,\n        \"category\": \"candy\",\n        \"name\": \"Cadbury Milk Chocolate\",\n        \"inStock\": true\n    },\n    {\n        \"id\": 5774,\n        \"category\": \"candy\",\n        \"name\": \"HERSHEY'S, Milk Chocolate Almond\",\n        \"inStock\": true\n    },\n    {\n        \"id\": 8753,\n        \"category\": \"dairy\",\n        \"name\": \"Reduced Fat Milk\",\n        \"inStock\": true\n    },\n    {\n        \"id\": 9482,\n        \"category\": \"dairy\",\n        \"name\": \"Whole Milk\",\n        \"inStock\": true\n    },\n    {\n        \"id\": 5477,\n        \"category\": \"dairy\",\n        \"name\": \"Cream Cheese\",\n        \"inStock\": true\n    },\n    {\n        \"id\": 5478,\n        \"category\": \"dairy\",\n        \"name\": \"Low Fat Vanilla Yogurt\",\n        \"inStock\": true\n    },\n    {\n        \"id\": 4875,\n        \"category\": \"bread-bakery\",\n        \"name\": \"2800 Watt Inverter Generator\",\n        \"inStock\": true\n    }\n]"
				}
			]
		},
		{
			"name": "Get Single product",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var schema = {\r",
							"    \"items\": {\r",
							"        \"type\": \"boolean\"\r",
							"    }\r",
							"};\r",
							"\r",
							"var data1 = [true, false];\r",
							"var data2 = [true, 123];\r",
							"\r",
							"pm.test('Schema is valid', function () {\r",
							"    pm.expect(tv4.validate(data1, schema)).to.be.true;\r",
							"    pm.expect(tv4.validate(data2, schema)).to.be.true;\r",
							"});"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "HEAD",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/products/:productId",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"products",
						":productId"
					],
					"variable": [
						{
							"key": "productId",
							"value": "4646"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Create a new Cart",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test('Status code is 201', function () {\r",
							"    pm.response.to.have.status(201);\r",
							"    const jsonData = pm.response.json();\r",
							"    pm.collectionVariables.set('cartId', jsonData.cartId);\r",
							"})\r",
							"\r",
							"pm.test('Response has a valid cart id', function () {\r",
							"    const jsonData = pm.response.json();\r",
							"    pm.expect(jsonData).to.be.an('object');\r",
							"    pm.expect(jsonData).to.have.property('cartId');\r",
							"    pm.expect(jsonData.cartId).to.be.a('string');\r",
							"})\r",
							"\r",
							"pm.globals.set(\"variable_key\", \"variable_value\");"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/carts",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"carts"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get cart",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", function () {",
							"  pm.response.to.have.status(200);",
							"});",
							"",
							"",
							"pm.test(\"Response has the required fields\", function () {",
							"  const responseData = pm.response.json();",
							"",
							"  pm.expect(responseData).to.be.an('object');",
							"  pm.expect(responseData.items).to.exist.and.to.be.an('array');",
							"  pm.expect(responseData.created).to.exist.and.to.be.a('string');",
							"});",
							"",
							"",
							"pm.test(\"Items array is empty\", function () {",
							"  const responseData = pm.response.json();",
							"  ",
							"  pm.expect(responseData.items).to.be.an('array').that.is.empty;",
							"});",
							"",
							"",
							"pm.test(\"Created field is in a valid date format\", function () {",
							"    const responseData = pm.response.json();",
							"",
							"    pm.expect(responseData.created).to.match(/^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}\\.\\d{3}Z$/);",
							"});",
							"",
							"",
							"pm.test(\"Response time is less than 500ms\", function () {",
							"    pm.expect(pm.response.responseTime).to.be.below(500);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/carts/:cartId",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"carts",
						":cartId"
					],
					"variable": [
						{
							"key": "cartId",
							"value": "{{cartId}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Get cart items",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", function () {",
							"  pm.expect(pm.response.code).to.equal(200);",
							"});",
							"",
							"",
							"pm.test(\"Response has the correct Content-Type header\", function () {",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
							"});",
							"",
							"",
							"pm.test(\"Response is an array\", function () {",
							"  pm.expect(pm.response.json()).to.be.an('array');",
							"});",
							"",
							"",
							"pm.test(\"Response array is empty\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('array').that.is.empty;",
							"});",
							"",
							"",
							"pm.test(\"Response time is within an acceptable range\", function () {",
							"    pm.expect(pm.response.responseTime).to.be.below(500);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/carts/:cartId/items",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"carts",
						":cartId",
						"items"
					],
					"variable": [
						{
							"key": "cartId",
							"value": "{{cartId}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Update quantity",
			"request": {
				"method": "PATCH",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"quantity\": 2\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/carts/:cartId/items/:itemId",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"carts",
						":cartId",
						"items",
						":itemId"
					],
					"variable": [
						{
							"key": "cartId",
							"value": "{{cartId}}"
						},
						{
							"key": "itemId",
							"value": "{{lastAddedItemId}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Replace product in cart",
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"productId\": 4646,\r\n    \"quantity\": 2\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/carts/:cartId/items/:itemId",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"carts",
						":cartId",
						"items",
						":itemId"
					],
					"variable": [
						{
							"key": "cartId",
							"value": "{{cartId}}"
						},
						{
							"key": "itemId",
							"value": "{{lastAddedItemId}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete item in cart",
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/carts/:cartId/items/:itemId",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"carts",
						":cartId",
						"items",
						":itemId"
					],
					"variable": [
						{
							"key": "cartId",
							"value": "{{cartId}}"
						},
						{
							"key": "itemId",
							"value": "{{lastAddedItemId}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Add item to cart",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 201\", function () {\r",
							"    pm.response.to.have.status(201);\r",
							"});\r",
							"\r",
							"pm.test(\"Set item id to a variable\", function() {\r",
							"    const jsonData = pm.response.json();\r",
							"    const lastAddedItemId = jsonData.itemId;\r",
							"    pm.collectionVariables.set(\"lastAddedItemId\", lastAddedItemId)\r",
							"    console.log(lastAddedItemId)\r",
							"})\r",
							"\r",
							"pm.test(\"Item was created\", function() {\r",
							"    pm.expect(pm.response).to.be.an('object');\r",
							"    const jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.created).equals(true);\r",
							"    pm.expect(jsonData.itemId).to.be.a('number');\r",
							"})\r",
							"\r",
							"// const csvData = JSON.parse(pm.globals.get('Data1.csv'));\r",
							"// const firstRow = csvData[1];\r",
							"// console.log(firstRow);\r",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"// const csvData = pm.iterationData.get('csvFile'); // Assuming you've uploaded the CSV file as an environment or collection variable\r",
							"\r",
							"// const lines = csvData.split('\\n');\r",
							"// const headers = lines[0].split(',');\r",
							"\r",
							"// const csvArray = [];\r",
							"// for (let i = 1; i < lines.length; i++) {\r",
							"//     const data = lines[i].split(',');\r",
							"//     const row = {};\r",
							"//     for (let j = 0; j < headers.length; j++) {\r",
							"//         row[headers[j]] = data[j];\r",
							"//     }\r",
							"//     csvArray.push(row);\r",
							"// }\r",
							"\r",
							"// console.log('CSV file successfully processed');\r",
							"// pm.globals.set('csvData', JSON.stringify(csvArray));\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n   \"productId\": 4643\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/carts/{{cartId}}/items",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"carts",
						"{{cartId}}",
						"items"
					]
				}
			},
			"response": []
		},
		{
			"name": "Register API Client",
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n   \"clientName\": \"Postman on Ernest's computer\",\r\n   \"clientEmail\": \"ernest@example.com\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/api-clients",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"api-clients"
					]
				}
			},
			"response": []
		},
		{
			"name": "Create an order",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 201\", function () {\r",
							"    pm.response.to.have.status(201);\r",
							"});\r",
							"\r",
							"pm.test(\"Order was created\", function () {\r",
							"     pm.expect(pm.response.json()).to.be.an('object');\r",
							"     pm.expect(pm.response.json().created).to.exist.and.to.be.true;\r",
							"     pm.expect(pm.response.json().orderId).to.exist.and.to.be.a('string');\r",
							"     pm.collectionVariables.set(\"orderId\", pm.response.json().orderId);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{accessToken}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"cartId\": \"{{cartId}}\",\r\n    \"customerName\": \"Ernest Brooks\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/orders?cartId={{cartId}}",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"orders"
					],
					"query": [
						{
							"key": "cartId",
							"value": "{{cartId}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Get all orders",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", function () {",
							"  pm.response.to.have.status(200);",
							"});",
							"",
							"",
							"pm.test(\"Validate the id field is a non-empty string\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    responseData.forEach(function(order) {",
							"        pm.expect(order.id).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");",
							"    });",
							"});",
							"",
							"",
							"pm.test(\"Validate that the items array is present and contains at least one element\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('array');",
							"    pm.expect(responseData).to.have.lengthOf.at.least(1, \"Array should contain at least one element\");",
							"    responseData.forEach(function(order) {",
							"        pm.expect(order.items).to.exist.and.to.be.an('array');",
							"        pm.expect(order.items).to.have.lengthOf.at.least(1, \"Items array should contain at least one element\");",
							"    });",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{accessToken}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/orders",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"orders"
					],
					"query": [
						{
							"key": "orderId",
							"value": "ghhdIvXd5ymU1UlYH_Mlb",
							"disabled": true
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Update order",
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{accessToken}}",
							"type": "string"
						}
					]
				},
				"method": "PATCH",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n \"comment\": \"Pickup @ 2pm\",\r\n \"customerName\": \"Ernest Brooks\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/orders/:orderId",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"orders",
						":orderId"
					],
					"variable": [
						{
							"key": "orderId",
							"value": "{{orderId}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete order",
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{accessToken}}",
							"type": "string"
						}
					]
				},
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/orders/:orderId",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"orders",
						":orderId"
					],
					"variable": [
						{
							"key": "orderId",
							"value": "{{orderId}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Get single order",
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{accessToken}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/orders/:orderId",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"orders",
						":orderId"
					],
					"variable": [
						{
							"key": "orderId",
							"value": "{{orderId}}"
						}
					]
				}
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "baseUrl",
			"value": "https://simple-grocery-store-api.glitch.me"
		},
		{
			"key": "accessToken",
			"value": "ffecac1ea90dae29a767f5ab3b97d5f4db495ecdc769d80631f832af9d1f5406",
			"type": "string"
		},
		{
			"key": "cartId",
			"value": ""
		},
		{
			"key": "lastAddedItemId",
			"value": ""
		},
		{
			"key": "orderId",
			"value": ""
		}
	]
}